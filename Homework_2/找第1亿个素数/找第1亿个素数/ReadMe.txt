========================================================================
控制台应用程序：找第n亿个素数 项目概述
=========================================================================
本文件概要介绍组成找第n亿个素数应用程序的每个文件的内容。
   本源程序用于寻找1亿以内任意一个素数。输入：1~1亿（包括1亿）以内任意一个数，找出该序号表示的素数。如输入100，即输出第100个素数7919。

   算法简介：
   前前后后看了一些算法。有很强的概率逼近算法，部分筛法等等。由于时间和偏爱问题，最终选择了朴素的筛法。（也试过非线性欧拉筛法，比经过改进的朴素筛法还要慢！放弃。）
该算法思想主要就是利用一个判断数组isprime[]，初始态为0，即默认全为素数，从2开始，如果isprime[i]为0，则表示该数为素数，计数器加一。并且将i的所有倍数置为1，表示合数。一直循环到计数器中的值等于要求的值，便得到要求的值。
  算法改进：
  首先，所有偶数（2单独考虑）全部去掉，可以去掉一半数。其次，所有三的倍数全部去掉（3单独考虑），这时只剩下1/6数据。从5开始，所有质数只可能出现在6n-1,6n+1位置。
  其次，从数学上可以证明，每次循环(假定当前需要剔除i的倍数)只要从i*i开始剔除，就可以保证剔除所有合数。复杂度降为（O(nloglogn)）。
  最后，可以推导出：当i在6n-1数组时候，6n-1数组起始位置为6i2,在6n+1数组中起始位置为6i2-2i，循环步长为6n-1；当i在6n+1数组时候，6n-1数组起始位置为6i2+6i+1,在6n+1数组中起始位置为6i2+2i，循环步长为6n+1。
   项目构成信息：
   “找第n亿个素数.vcxproj”：
  这是使用应用程序向导生成的 VC++ 项目的主项目文件，其中包含生成该文件的 Visual C++ 的版本信息，以及有关使用应用程序向导选择的平台、配置和项目功能的信息。
   “找第n亿个素数.vcxproj.filters”：
  这是使用“应用程序向导”生成的 VC++ 项目筛选器文件。它包含有关项目文件与筛选器之间的关联信息。在 IDE 中，通过这种关联，在特定节点下以分组形式显示具有相似扩展名的文件。例如，“.cpp”文件与“源文件”筛选器关联。
   “找第n亿个素数.cpp”：
    这是主应用程序源文件。
   
    其他标准文件:
   <iostream>,<algorithm>,<string>,<sstream>,<cctype>,<ctime>。
本源码使用了C++提供的标准库函数，在以上这些头文件中声明。
   
  主要全局变量：
存放判断是否为素数的数组：isprime_n[]判断6n-1;isprime_p[]判断6n+1。
存放素数值：prime。
   函数简介：
   void sieve(long long &n, long long &upper_bond)：
这是本源码的主要执行函数，用改进版朴素筛法寻找第n个素数。
输入：待找素数序号n,筛数上界upper_bond 。
输出：待找素数值,存放在全局变量prime中。

   bool input(long long &n)：
输入：键盘输入待找素数序号，并给予判断。如果符合格式：在1~1亿之间，存于n中。

   void get_upper_bond(long long &n, long long  &upper_bond)：
根据经验，由输入确定筛数范围。
输入：待找素数序号n.
输出：筛数范围upper_bond。
